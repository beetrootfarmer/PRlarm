name: PR Review Reminder

on:
  schedule:
    # 테스트를 위해 매 시간 실행 (실제 사용 시 조정 필요)
    - cron: "0 * * * *"
  # 수동 실행 옵션 추가 (테스트용)
  workflow_dispatch:

jobs:
  remind:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get pending PRs
        id: pending-prs
        uses: actions/github-script@v6
        with:
          script: |

            // 사용자 매핑 파일 로드 (파일이 없으면 빈 객체 사용)
             let userMapping = {};
             try {
               if (fs.existsSync('.github/user-mapping.json')) {
                 const mappingData = fs.readFileSync('.github/user-mapping.json', 'utf8');
                 userMapping = JSON.parse(mappingData).github_to_slack || {};
               }
             } catch (error) {
               console.log('사용자 매핑 파일을 로드하는 중 오류 발생:', error);
             }
             
             // GitHub 사용자명을 Slack ID로 변환하는 함수
             function getSlackId(githubUsername) {
               return userMapping[githubUsername] ? `<@${userMapping[githubUsername]}>` : githubUsername;
             }
             
             // 지라 티켓 ID 추출 함수
             function extractJiraTicket(text) {
               const jiraRegex = /([A-Z]+-\d+)/g;
               const matches = text.match(jiraRegex);
               return matches ? matches[0] : null;
             }

             const prs = await github.rest.pulls.list({
               owner: context.repo.owner,
               repo: context.repo.repo,
               state: 'open'
             });

             let message = "📋 *리뷰 대기 중인 PR 목록*\n\n";
             let hasPRs = false;

              for (const pr of prs.data) {
               // 리뷰 상태 확인 (승인된 PR은 제외)
               const reviews = await github.rest.pulls.listReviews({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 pull_number: pr.number
               });
               
               // 최신 리뷰가 승인인지 확인
               const isApproved = reviews.data.some(review => 
                 review.state === 'APPROVED' && 
                 !reviews.data.some(r => 
                   r.submitted_at > review.submitted_at && 
                   r.state !== 'APPROVED'
                 )
               );
               
               // 승인된 PR은 건너뛰기
               if (isApproved) continue;
               
               if (pr.requested_reviewers && pr.requested_reviewers.length > 0) {
                 hasPRs = true;
                 
                 // 리뷰어 정보 가져오기 (Slack ID로 변환)
                 const reviewers = pr.requested_reviewers
                   .map(r => {
                     if (r.login) {
                       return getSlackId(r.login);
                     } else if (r.slug) {
                       return `팀: ${r.slug}`;
                     } else {
                       return '알 수 없는 리뷰어';
                     }
                   })
                   .join(', ');
                 
                 // 지라 티켓 정보 추출
                 const jiraTicket = extractJiraTicket(pr.title);
                 let jiraInfo = '';
                 if (jiraTicket) {
                   jiraInfo = ` | 지라: ${jiraTicket}`;
                 }
                 
                 // PR 생성일로부터 경과일 계산
                 const createdDate = new Date(pr.created_at);
                 const today = new Date();
                 const daysOld = Math.floor((today - createdDate) / (1000 * 60 * 60 * 24));
                 let urgencyEmoji = '';
                 
                 if (daysOld >= 5) {
                   urgencyEmoji = '🔴'; // 5일 이상 지난 PR
                 } else if (daysOld >= 3) {
                   urgencyEmoji = '🟠'; // 3-4일 지난 PR
                 } else if (daysOld >= 1) {
                   urgencyEmoji = '🟡'; // 1-2일 지난 PR
                 } else {
                   urgencyEmoji = '🟢'; // 오늘 생성된 PR
                 }
                 
                 // 담당자 정보 추가
                 const assignees = pr.assignees && pr.assignees.length > 0 
                   ? pr.assignees.map(a => getSlackId(a.login)).join(', ')
                   : '없음';
                 
                 message += `${urgencyEmoji} <${pr.html_url}|#${pr.number}: ${pr.title}>${jiraInfo}\n`;
                 message += `   • 리뷰어: ${reviewers}\n`;
                 message += `   • 담당자: ${assignees}\n`;
                 message += `   • 생성일: ${createdDate.toLocaleDateString()} (${daysOld}일 전)\n\n`;
               }
             }
             

             if (!hasPRs) {
               message = "현재 리뷰 대기 중인 PR이 없습니다.🙌";
             }

             core.setOutput('message', message);
             core.setOutput('has_prs', hasPRs.toString());

             // 디버깅을 위해 콘솔에 출력
             console.log(message);

      - name: Send Slack notification
        uses: slackapi/slack-github-action@v1.24.0
        with:
          channel-id: "C08JG1LKT44" # 슬랙 채널 ID
          slack-message: ${{ steps.pending-prs.outputs.message }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
